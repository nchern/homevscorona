// Package pgstore contains the types for schema 'public'.
package pgstore

import (
	"database/sql"
	"time"

	"github.com/huandu/go-sqlbuilder"
)

// Code generated by xo. DO NOT EDIT.

// FlywaySchemaHistoryTableName returns the name of corresponding table
const FlywaySchemaHistoryTableName = "flyway_schema_history"

// FlywaySchemaHistory represents this table meta instance
var FlywaySchemaHistory = FlywaySchemaHistoryTable{}

// FlywaySchemaHistoryTuple represents one row in the "flyway_schema_history"
type FlywaySchemaHistoryTuple struct {
	InstalledRank int

	Version sql.NullString

	Description string

	Type string

	Script string

	Checksum sql.NullInt64

	InstalledBy string

	InstalledOn time.Time

	ExecutionTime int

	Success bool
}

// Scan fills this tuple with the data read from db. All fields must present in the given row.
func (t *FlywaySchemaHistoryTuple) Scan(row Row) error {
	return row.Scan(
		&t.InstalledRank,
		&t.Version,
		&t.Description,
		&t.Type,
		&t.Script,
		&t.Checksum,
		&t.InstalledBy,
		&t.InstalledOn,
		&t.ExecutionTime,
		&t.Success,
	)
}

// FlywaySchemaHistoryInsertCommand is a helper struct to construct *sql.InsertBuilder that allows to insert one FlywaySchemaHistory row into the db
type FlywaySchemaHistoryInsertCommand struct {
	InstalledRank interface{}

	Version interface{}

	Description interface{}

	Type interface{}

	Script interface{}

	Checksum interface{}

	InstalledBy interface{}

	InstalledOn interface{}

	ExecutionTime interface{}

	Success interface{}
}

// ToBuilder creates ready-for-use InsertBuilder
func (t *FlywaySchemaHistoryInsertCommand) ToBuilder() *sqlbuilder.InsertBuilder {
	builder := sqlbuilder.PostgreSQL.NewInsertBuilder()
	return builder.
		InsertInto("flyway_schema_history").
		Cols(
			"installed_rank",
			"version",
			"description",
			"type",
			"script",
			"checksum",
			"installed_by",
			"installed_on",
			"execution_time",
			"success",
		).
		Values(
			t.InstalledRank,
			t.Version,
			t.Description,
			t.Type,
			t.Script,
			t.Checksum,
			t.InstalledBy,
			t.InstalledOn,
			t.ExecutionTime,
			t.Success,
		)
}

// FlywaySchemaHistoryTable exports metadata of corresponding table
type FlywaySchemaHistoryTable struct{}

// InstalledRank column name
func (t FlywaySchemaHistoryTable) InstalledRank() string {
	return "installed_rank"
}

// InstalledRankFull is the column name including the table name
func (t FlywaySchemaHistoryTable) InstalledRankFull() string {
	return "flyway_schema_history.installed_rank"
}

// Version column name
func (t FlywaySchemaHistoryTable) Version() string {
	return "version"
}

// VersionFull is the column name including the table name
func (t FlywaySchemaHistoryTable) VersionFull() string {
	return "flyway_schema_history.version"
}

// Description column name
func (t FlywaySchemaHistoryTable) Description() string {
	return "description"
}

// DescriptionFull is the column name including the table name
func (t FlywaySchemaHistoryTable) DescriptionFull() string {
	return "flyway_schema_history.description"
}

// Type column name
func (t FlywaySchemaHistoryTable) Type() string {
	return "type"
}

// TypeFull is the column name including the table name
func (t FlywaySchemaHistoryTable) TypeFull() string {
	return "flyway_schema_history.type"
}

// Script column name
func (t FlywaySchemaHistoryTable) Script() string {
	return "script"
}

// ScriptFull is the column name including the table name
func (t FlywaySchemaHistoryTable) ScriptFull() string {
	return "flyway_schema_history.script"
}

// Checksum column name
func (t FlywaySchemaHistoryTable) Checksum() string {
	return "checksum"
}

// ChecksumFull is the column name including the table name
func (t FlywaySchemaHistoryTable) ChecksumFull() string {
	return "flyway_schema_history.checksum"
}

// InstalledBy column name
func (t FlywaySchemaHistoryTable) InstalledBy() string {
	return "installed_by"
}

// InstalledByFull is the column name including the table name
func (t FlywaySchemaHistoryTable) InstalledByFull() string {
	return "flyway_schema_history.installed_by"
}

// InstalledOn column name
func (t FlywaySchemaHistoryTable) InstalledOn() string {
	return "installed_on"
}

// InstalledOnFull is the column name including the table name
func (t FlywaySchemaHistoryTable) InstalledOnFull() string {
	return "flyway_schema_history.installed_on"
}

// ExecutionTime column name
func (t FlywaySchemaHistoryTable) ExecutionTime() string {
	return "execution_time"
}

// ExecutionTimeFull is the column name including the table name
func (t FlywaySchemaHistoryTable) ExecutionTimeFull() string {
	return "flyway_schema_history.execution_time"
}

// Success column name
func (t FlywaySchemaHistoryTable) Success() string {
	return "success"
}

// SuccessFull is the column name including the table name
func (t FlywaySchemaHistoryTable) SuccessFull() string {
	return "flyway_schema_history.success"
}

// SelectByPrimaryKeyBuilder returns ready-for-user sql builder to query the table by primary key. Intended for usage in tests mainly
func (t FlywaySchemaHistoryTable) SelectByPrimaryKeyBuilder(
	id0 int,
) *sqlbuilder.SelectBuilder {
	builder := sqlbuilder.PostgreSQL.NewSelectBuilder()
	return builder.
		Select(
			FlywaySchemaHistory.InstalledRank(),
			FlywaySchemaHistory.Version(),
			FlywaySchemaHistory.Description(),
			FlywaySchemaHistory.Type(),
			FlywaySchemaHistory.Script(),
			FlywaySchemaHistory.Checksum(),
			FlywaySchemaHistory.InstalledBy(),
			FlywaySchemaHistory.InstalledOn(),
			FlywaySchemaHistory.ExecutionTime(),
			FlywaySchemaHistory.Success(),
		).
		From(FlywaySchemaHistoryTableName).
		Where(
			builder.Equal(FlywaySchemaHistory.InstalledRank(), id0),
		)
}
