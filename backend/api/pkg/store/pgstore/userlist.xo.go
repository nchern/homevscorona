// Package pgstore contains the types for schema 'public'.
package pgstore

import (
	"github.com/google/uuid"
	"github.com/huandu/go-sqlbuilder"
)

// Code generated by xo. DO NOT EDIT.

// UserListTableName returns the name of corresponding table
const UserListTableName = "user_list"

// UserList represents this table meta instance
var UserList = UserListTable{}

// UserListTuple represents one row in the "user_list"
type UserListTuple struct {
	ID uuid.UUID

	Created int64

	Updated int64

	Status Userstatus

	Email string

	Body string
}

// Scan fills this tuple with the data read from db. All fields must present in the given row.
func (t *UserListTuple) Scan(row Row) error {
	return row.Scan(
		&t.ID,
		&t.Created,
		&t.Updated,
		&t.Status,
		&t.Email,
		&t.Body,
	)
}

// UserListInsertCommand is a helper struct to construct *sql.InsertBuilder that allows to insert one UserList row into the db
type UserListInsertCommand struct {
	ID interface{}

	Created interface{}

	Updated interface{}

	Status interface{}

	Email interface{}

	Body interface{}
}

// ToBuilder creates ready-for-use InsertBuilder
func (t *UserListInsertCommand) ToBuilder() *sqlbuilder.InsertBuilder {
	builder := sqlbuilder.PostgreSQL.NewInsertBuilder()
	return builder.
		InsertInto("user_list").
		Cols(
			"id",
			"created",
			"updated",
			"status",
			"email",
			"body",
		).
		Values(
			t.ID,
			t.Created,
			t.Updated,
			t.Status,
			t.Email,
			t.Body,
		)
}

// UserListTable exports metadata of corresponding table
type UserListTable struct{}

// ID column name
func (t UserListTable) ID() string {
	return "id"
}

// IDFull is the column name including the table name
func (t UserListTable) IDFull() string {
	return "user_list.id"
}

// Created column name
func (t UserListTable) Created() string {
	return "created"
}

// CreatedFull is the column name including the table name
func (t UserListTable) CreatedFull() string {
	return "user_list.created"
}

// Updated column name
func (t UserListTable) Updated() string {
	return "updated"
}

// UpdatedFull is the column name including the table name
func (t UserListTable) UpdatedFull() string {
	return "user_list.updated"
}

// Status column name
func (t UserListTable) Status() string {
	return "status"
}

// StatusFull is the column name including the table name
func (t UserListTable) StatusFull() string {
	return "user_list.status"
}

// Email column name
func (t UserListTable) Email() string {
	return "email"
}

// EmailFull is the column name including the table name
func (t UserListTable) EmailFull() string {
	return "user_list.email"
}

// Body column name
func (t UserListTable) Body() string {
	return "body"
}

// BodyFull is the column name including the table name
func (t UserListTable) BodyFull() string {
	return "user_list.body"
}

// SelectByPrimaryKeyBuilder returns ready-for-user sql builder to query the table by primary key. Intended for usage in tests mainly
func (t UserListTable) SelectByPrimaryKeyBuilder(
	id0 uuid.UUID,
) *sqlbuilder.SelectBuilder {
	builder := sqlbuilder.PostgreSQL.NewSelectBuilder()
	return builder.
		Select(
			UserList.ID(),
			UserList.Created(),
			UserList.Updated(),
			UserList.Status(),
			UserList.Email(),
			UserList.Body(),
		).
		From(UserListTableName).
		Where(
			builder.Equal(UserList.ID(), id0),
		)
}
