// Package pgstore contains the types for schema 'public'.
package pgstore

import (
	"github.com/google/uuid"
	"github.com/huandu/go-sqlbuilder"
)

// Code generated by xo. DO NOT EDIT.

// EventTableName returns the name of corresponding table
const EventTableName = "event"

// Event represents this table meta instance
var Event = EventTable{}

// EventTuple represents one row in the "event"
type EventTuple struct {
	ID uuid.UUID

	UserID uuid.UUID

	Created int64

	Body string
}

// Scan fills this tuple with the data read from db. All fields must present in the given row.
func (t *EventTuple) Scan(row Row) error {
	return row.Scan(
		&t.ID,
		&t.UserID,
		&t.Created,
		&t.Body,
	)
}

// EventInsertCommand is a helper struct to construct *sql.InsertBuilder that allows to insert one Event row into the db
type EventInsertCommand struct {
	ID interface{}

	UserID interface{}

	Created interface{}

	Body interface{}
}

// ToBuilder creates ready-for-use InsertBuilder
func (t *EventInsertCommand) ToBuilder() *sqlbuilder.InsertBuilder {
	builder := sqlbuilder.PostgreSQL.NewInsertBuilder()
	return builder.
		InsertInto("event").
		Cols(
			"id",
			"user_id",
			"created",
			"body",
		).
		Values(
			t.ID,
			t.UserID,
			t.Created,
			t.Body,
		)
}

// EventTable exports metadata of corresponding table
type EventTable struct{}

// ID column name
func (t EventTable) ID() string {
	return "id"
}

// IDFull is the column name including the table name
func (t EventTable) IDFull() string {
	return "event.id"
}

// UserID column name
func (t EventTable) UserID() string {
	return "user_id"
}

// UserIDFull is the column name including the table name
func (t EventTable) UserIDFull() string {
	return "event.user_id"
}

// Created column name
func (t EventTable) Created() string {
	return "created"
}

// CreatedFull is the column name including the table name
func (t EventTable) CreatedFull() string {
	return "event.created"
}

// Body column name
func (t EventTable) Body() string {
	return "body"
}

// BodyFull is the column name including the table name
func (t EventTable) BodyFull() string {
	return "event.body"
}

// SelectByPrimaryKeyBuilder returns ready-for-user sql builder to query the table by primary key. Intended for usage in tests mainly
func (t EventTable) SelectByPrimaryKeyBuilder(
	id0 uuid.UUID,
) *sqlbuilder.SelectBuilder {
	builder := sqlbuilder.PostgreSQL.NewSelectBuilder()
	return builder.
		Select(
			Event.ID(),
			Event.UserID(),
			Event.Created(),
			Event.Body(),
		).
		From(EventTableName).
		Where(
			builder.Equal(Event.ID(), id0),
		)
}
