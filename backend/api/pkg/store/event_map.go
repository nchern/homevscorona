// generated by go-codegen(https://github.com/nchern/go-codegen)
// You COULD edit this code it you really need it and know what are you doing

package store

import "sync"

type StringEventEntryPtrMapVisitor func(string, *eventEntry) bool

type StringEventEntryPtrMap interface {
	Each(visitor StringEventEntryPtrMapVisitor)
	Get(key string) (v *eventEntry, found bool)
	Set(key string, val *eventEntry)
	Update(src map[string]*eventEntry) StringEventEntryPtrMap
	Remove(key string) bool
	Clone() StringEventEntryPtrMap
}

type baseStringEventEntryPtrMap struct {
	_map map[string]*eventEntry
}

func NewStringEventEntryPtrMap() StringEventEntryPtrMap {
	res := &baseStringEventEntryPtrMap{
		_map: map[string]*eventEntry{},
	}
	return res
}

func NewStringEventEntryPtrMapSyncronized() StringEventEntryPtrMap {
	return &syncStringEventEntryPtrMap{
		inner: NewStringEventEntryPtrMap(),
	}
}

func (m *baseStringEventEntryPtrMap) Get(key string) (v *eventEntry, found bool) {
	v, found = m._map[key]
	return
}

func (m *baseStringEventEntryPtrMap) Each(visitor StringEventEntryPtrMapVisitor) {
	for k, v := range m._map {
		if !visitor(k, v) {
			return
		}
	}
}

func (m *baseStringEventEntryPtrMap) Set(key string, val *eventEntry) {
	m._map[key] = val
}

func (m *baseStringEventEntryPtrMap) Update(src map[string]*eventEntry) StringEventEntryPtrMap {
	for k, v := range src {
		m._map[k] = v
	}
	return m
}

func (m *baseStringEventEntryPtrMap) Remove(key string) bool {
	_, found := m._map[key]
	delete(m._map, key)

	return found
}

func (m *baseStringEventEntryPtrMap) Clone() StringEventEntryPtrMap {
	res := NewStringEventEntryPtrMap()
	for k, v := range m._map {
		res.Set(k, v)
	}

	return res
}

type syncStringEventEntryPtrMap struct {
	inner StringEventEntryPtrMap

	mutex sync.RWMutex
}

func (m *syncStringEventEntryPtrMap) Each(visitor StringEventEntryPtrMapVisitor) {
	m.mutex.RLock()
	m.inner.Each(visitor)
	m.mutex.RUnlock()
}

func (m *syncStringEventEntryPtrMap) Get(key string) (v *eventEntry, found bool) {
	m.mutex.RLock()
	v, found = m.inner.Get(key)
	m.mutex.RUnlock()
	return
}

func (m *syncStringEventEntryPtrMap) Set(key string, val *eventEntry) {
	m.mutex.Lock()
	m.inner.Set(key, val)
	m.mutex.Unlock()
}

func (m *syncStringEventEntryPtrMap) Update(src map[string]*eventEntry) StringEventEntryPtrMap {
	m.mutex.Lock()
	m.inner.Update(src)
	m.mutex.Unlock()

	return m
}

func (m *syncStringEventEntryPtrMap) Remove(key string) bool {
	m.mutex.Lock()
	found := m.inner.Remove(key)
	m.mutex.Unlock()

	return found
}

func (m *syncStringEventEntryPtrMap) Clone() StringEventEntryPtrMap {
	m.mutex.RLock()
	r := m.inner.Clone()
	m.mutex.RUnlock()
	return r
}
